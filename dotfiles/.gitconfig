[push]
  default = matching
[branch]
  status = auto
[diff]
	tool = opendiff
[merge]
	tool = opendiff
[core]
  editor = emacs
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[color]
  ui = true
[alias]
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  s = status
  r = reset head
  up = pull
  df = diff
  ci = commit
  # Switch to a branch, creating it if necessary
  co = checkout
  go = checkout -B
  # PULL in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"
  # CLONE a repository including all submodules
  c = clone --recursive
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  ls = ls-files 
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  ll = log --graph --decorate --pretty=oneline --abbrev-commit
  lla = log --graph --decorate --pretty=oneline --abbrev-commit --all
  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Commit all changes
  ca = !git add -A && git commit -av
  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"
  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"
  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"
  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
  # Remove branches that have already been merged with master
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
  permission-reset = "!git diff -p | grep -E \"^(diff|old mode|new mode)\" | sed -e \"s/^old/NEW/;s/^new/old/;s/^NEW/new/\" | git apply"
[credential]
	helper = osxkeychain
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
