#!/bin/bash
readonly ScriptVersion="0.2"
readonly PROGDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
readonly HOMEDIR=$(echo $HOME)
readonly PROGNAME=$(basename $0)
readonly LOG_FILE=$PROGDIR/../../logs/deploy.error.log
readonly DOTFILES=$PROGDIR/../dotfiles
readonly PATCHES=$PROGDIR/../patches
readonly INSTALL_DIR=$PROGDIR/../install
readonly CONFIG_DIR=$PROGDIR/../config
readonly ARGS="$@"
readonly GITDIR=/home/git
readonly NGINX_DIR=/opt/nginx
readonly g=/usr/bin/git
exec 3>&1 1>>${LOG_FILE} 2>&1;

function command_exists () {
    type "$1" &> /dev/null ;
}
readonly service_name=$1 # TODO: make mandatory
[[ $# -eq 0 ]] && {
  # no arguments
  echo -e "\ndeploy: Usage: PROGNAME your_repo {u|user|r|repo|b|branch|n|name|v|version}" 1>&3;
  exit 1
}
function sshKeys() {
  read -n 1
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    #-------------------
    # SSH Key
    #-------------------
    sudo ssh-keygen 1>&3;
    sudo cat /root/.ssh/id_rsa.pub | tee /dev/fd/3;
  elif [[ $REPLY =~ ^[Nn]$ ]]; then
    echo -e "\ndeploy: Skipping ssh-keygen"  | tee /dev/fd/3;
  fi
}
function initBare() {
  read -n 1
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    #-------------------
    # Git Repository Setup
    #-------------------
    sudo mkdir -p $git && cd $git
    $g --bare init | tee /dev/fd/3;
  elif [[ $REPLY =~ ^[Nn]$ ]]; then
    echo -e "\ndeploy: Deployment Cancelled!" | tee /dev/fd/3;
    exit 1;
  fi
}
function gitAuth(){
  read -n 1
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "\ndeploy: Proceeding with Deploy Key" | tee /dev/fd/3;
    deployKey
  elif [[ $REPLY =~ ^[Nn]$ ]]; then
    echo -e "\ndeploy: Proceeding with HTTPS authentication... not advised" | tee /dev/fd/3;
    httpsAuth
  fi
}
function deployKey() {
  $g --bare fetch git@github.com:$username/$repository.git $branch:$branch | tee /dev/fd/3;
  provision
}
function httpsAuth() {
  $g --bare fetch https://github.com/$username/$repository.git $branch:$branch | tee /dev/fd/3;
  provision
}
function provision() {
  sudo cp $scripts_dir/hooks/pre-receive.sh $git/hooks/pre-receive
  sudo cp $scripts_dir/hooks/post-receive.sh $git/hooks/post-receive
  sudo chmod +x $git/hooks/pre-receive
  sudo chmod +x $git/hooks/post-receive
  sudo cp $scripts_dir/service.sh /etc/init.d/$service_name
  sudo chmod 0755 /etc/init.d/$service_name
  sudo mkdir -p $work_tree
  # Backup existing configs
  sudo mv $NGINX_DIR/conf/sites-enabled $NGINX_DIR/conf/sites-enabled.backup
  sudo mkdir -p $NGINX_DIR/conf/sites-enabled
  # Copy new nginx.config  and site-available
  sudo cp -r $scripts_dir/sites-available $NGINX_DIR/conf/sites-enabled
  sudo nginx -s stop
  sudo nginx -t | tee /dev/fd/3;
  sudo nginx
}
function cmdLine() {
  #-------------------
  # Git Deployment
  #-------------------
  # u) USERNAME:        username of repository owner
  # r) REPOSITORY:      name of the repository being added
  # n) SERVICE_NAME:    name of the service to be created
  # b) BRANCH:          branch to be checked out
  # v) VERSION:         Version of App
  #
  # while getopts u:r:b:n:v opt
  # do
  #   case "${opt}"
  #   in
  #     -u|--user    ) username=${OPTARG};;
  #     -r|--repo    ) repository=${OPTARG};;
  #     -b|--branch  ) branch=${OPTARG};;
  #     -n|--name    ) service_name=${OPTARG};;
  #     -v|--version ) echo "$0 -- Version $ScriptVersion"; exit 0   ;;
  #                 *) ;;
  #   esac
  # done
  local repository=$service_name
  local username=$2
  local branch=$3
  local git=$GITDIR/$service_name.git
  local work_tree=$GITDIR/public/$service_name
  local scripts_dir=$PROGDIR/../../$service_name
  echo -e "Working tree will be: $work_tree on branch $branch" 1>&3;
  echo -e "Installing service $service_name, a git deployment for: github.com/"$username/$repository 1>&3;
  echo -e "Sripts and Hooks are in: "$scripts_dir 1>&3;
  echo -e "Git Directory: $git" 1>&3;
  # SSH Keys
  echo -e "\ndeploy: Generate SSH Key?" 1>&3;
  sshKeys
  # Git Repo
  echo -e "\ndeploy: Init Bare Git repo?" 1>&3;
  initBare
  # Git Authentication
  echo -e "\ndeploy: Deploy key? [Y/N] (visit: https://github.com/$username/$repository/settings/keys)" 1>&3;
  gitAuth
}
function main() {
  cmdLine $ARGS
}
main
unset httpsAuth
unset deployKey
unset initBare
unset provision
unset cmdLine
unset sshKeys
unset command_exists
unset main